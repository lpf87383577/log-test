<?xml version="1.0" encoding="UTF-8" ?>
<!--status:用来指定log4j本身的打印日志的级别.设置为debug看到Log4j2启动和加载配置文件时的打印信息，一般设置为warn，不需要看Log4j2相关信息-->
<!--monitorInterval:用来设置配置文件的动态加载时间的，单位是秒，monitorInterval="5" 表示每隔5秒重新加载一次配置文件，
    用户在程序运行过程中可以动态的修改配置文件，程序会随之改变-->
<configuration status="warn" monitorInterval="5">
    <!--  属性信息，后面配置中 ${LOG_HOME} 来引用这里的属性 -->
    <properties>
        <property name="LOG_HOME">E:/logs</property>
    </properties>
    <!--  Appenders 里面可以配置多个配置信息，后面<Loggers><Root><AppenderRef/>可以引用里面的配置-->
    <Appenders>
        <!-- 控制台打印日志-->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 格式-->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] [%-5level] %c{36}:%L --- %m%n" />
        </Console>
        <!-- 文件方式打印日志，fileName 指定文件，只写入一个文件，追加的方式一直写-->
        <File name="file" fileName="${LOG_HOME}/myfile.log">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %m%n" />
        </File>
        <!-- 和 file 类似，使用随机读写流的日志文件输出 appender，性能提高-->
        <RandomAccessFile name="accessFile" fileName="${LOG_HOME}/myAcclog.log">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %m%n" />
        </RandomAccessFile>
        <!-- 按照一定规则拆分的日志文件的appender，日志超过指定大小自动删除旧的创建新的日志-->
        <!-- 可以配置多个 RollingFile ，根据等级不同，将日志输入到不同的文件中  -->
        <RollingFile name="rollingFileWarn" fileName="${LOG_HOME}/myrollogWarn.log"
                     filePattern="E:/logs/$${date:yyyy-MM-dd}/myrollogWarn-%d{yyyy-MM-dd-HH-mm}-%i.log">
            <!-- 日志级别过滤器 -->
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY" />
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %msg%n" />
            <Policies>
                <!-- 在系统启动时，触发拆分规则，生产一个新的日志文件，由fileName定义的文件 -->
                <OnStartupTriggeringPolicy />
                <!-- 按照文件大小拆分，10MB,超过10MB，将fileName定义的日志文件移动到filePattern定义的文件中，fileName文件只记录最新的数据 -->
                <SizeBasedTriggeringPolicy size="10 MB" />
                <!-- 按照时间节点拆分，规则根据filePattern定义的 -->
                <TimeBasedTriggeringPolicy />
            </Policies>
            <!-- 在同一个目录下，文件的个限定为 30个，超过进行覆盖 -->
            <DefaultRolloverStrategy max="30" />
        </RollingFile>
        <RollingFile name="rollingFileTrace" fileName="${LOG_HOME}/myrollogTrace.log"
                     filePattern="E:/logs/$${date:yyyy-MM-dd}/myrollogTrace-%d{yyyy-MM-dd-HH-mm}-%i.log">
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY" />
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %msg%n" />
            <Policies>
                <OnStartupTriggeringPolicy />
                <SizeBasedTriggeringPolicy size="10 MB" />
                <TimeBasedTriggeringPolicy />
            </Policies>
            <DefaultRolloverStrategy max="30" />
        </RollingFile>
        <RollingFile name="rollingFileError" fileName="${LOG_HOME}/myrollogError.log"
                     filePattern="E:/logs/$${date:yyyy-MM-dd}/myrollogError-%d{yyyy-MM-dd-HH-mm}-%i.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY" />
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %msg%n" />
            <Policies>
                <OnStartupTriggeringPolicy />
                <SizeBasedTriggeringPolicy size="2 KB" />
                <TimeBasedTriggeringPolicy />
            </Policies>
            <DefaultRolloverStrategy max="30" />
        </RollingFile>
    </Appenders>

    <Loggers>
        <!-- 使用 rootLogger 配置 日志级别 level="trace" -->
        <Root level="trace">
            <!-- 指定日志使用的处理器，可以同时使用多个 -->
            <AppenderRef ref="Console" />
         <!--   <AppenderRef ref="rollingFileWarn" />-->
<!--            <AppenderRef ref="rollingFileTrace" />
            <AppenderRef ref="rollingFileError" />-->
        </Root>
    </Loggers>
</configuration>
